name: Test Build and Quality Checks

# プルリクエストやmainブランチへのpushでテスト実行
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # 1. コード品質チェック
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Linting skipped (no lint script)"

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate || echo "Security audit completed"

      - name: Check for outdated dependencies
        run: npm outdated || echo "Dependency check completed"

  # 2. Docker ビルドテスト
  test-build:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.build
          platforms: linux/amd64 # テストは1プラットフォームのみ
          push: false
          tags: test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify build success
        run: |
          echo "✅ ビルドテスト完了"
          echo "イメージサイズを確認:"
          docker images test:latest

  # 3. セキュリティスキャン
  security-scan:
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test:latest
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"

      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "1"
          ignore-unfixed: true

  # 4. テスト結果サマリー
  summary:
    runs-on: ubuntu-latest
    needs: [code-quality, test-build, security-scan]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "🧪 テスト結果サマリー"
          echo "=================="
          echo "✅ コード品質チェック: ${{ needs.code-quality.result }}"
          echo "✅ Docker ビルドテスト: ${{ needs.test-build.result }}"
          echo "✅ セキュリティスキャン: ${{ needs.security-scan.result }}"
          echo ""
          if [ "${{ needs.code-quality.result }}" == "success" ] && [ "${{ needs.test-build.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "🎉 全テストが成功しました！"
          else
            echo "⚠️  一部のテストが失敗しました。詳細を確認してください。"
            exit 1
          fi
